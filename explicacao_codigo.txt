EXPLICAÇÃO DO CODIGO

Inicialmente definimos o tamanho da array atraves da função SIZE
criamos a lista original com o tamanho definido e criamos outra array, vazia, que sera a sorted lista
Criamos também um struct, que vai possuir duas propriedades: start e end, sera usado para cada thread
responsavel por fazer o sort para identificar que parte da array original ele deve começar o sorting 
e até onde deve ir.

Na função main definimos o id das 3 threads, as duas threas q fazer o sort de diferentes metades da array original
e um id de thread que sera responsavel por fazer o merge do resultado de ambas as threads em uma array nova
Em seguida definimos os duas variaveis de arguments, que sera usado na futura função responsavel por fazer o
sort de uma metade de array. Essas variaveis de arguments são do tipo ThreadArgs, com start e end.
O primeiro, args1, tem o start como 0 e o end como SIZE/2, já o args2 tem start como SIZE/2 E end como SIZE

Temos a função sortSublist, que vai receber um parametro do tipo void * e retorna também um ponteiro para nada.
Isso é necessário pois a função sera usada pelo metodo pthread_create, e por exigencia da API de threads do POSIX
basicamente é necessario deixar a assinatura da função dessa forma

Logo em seguida fazemos o casting do args para ThreadArgs, onde poderemos pegar o start e o end. 
Após isso é realizado o processo de ordenação usando bubble sort.
Vamos passar pela array, um valor por vez, para cada valor compara-se com o própximo. Se o valor atual
é maior que o próximo valor, faça o swap dos valores. Esse processo será realizado novamente para cada item 
na array. Após a ordenação chamamos pthread_exit(NULL) indicando que a thread já foi finalizada. 

Voltando para a função main, a função sortSublist eh chamada dentro do pthread_create.
Para cada thread criada passamos o id da thread, a função que será executada nessa thread e o endereço dos respectivos argumentos
para cada thread. Esses argumentos serão args1 e args2, definidos anteriormente. Ou seja em cada thread será
passado o ponteiro para cada um dos argumentos e dentro das threads, como visto anteriormente, será feito o casting
desses argumentos.

Em seguida usamos pthread_join que vai basicamente fazer o programa esperar as duas threads anteriores serem 
executadas.

Após a execução das duas threads anteriores temos pthread_create novamente onde vamos passar o endereço
da thread de merge e a função a ser executada naquela thread, que será a mergeSublists 

Como a função mergeSublists também vai ser utilizada dentro de uma thread temos que ter o mesmo 
tipo de retorno e valor dos argumentos, como descrito anteriormente. Inicialmente definimos mid como metade do SIZE,
i como 0, este sera o apontador para a primeira metade. J sera o apontador para a segunda metade e seu valor inicial sera mid.
k será 0 e vai ser o apontador para o array final. No primeiro loop, que será executado 
enquanto i for menor que mid e j menor que SIZE, verificamos se o valor na original list no index i é menor
que o valor na original list no indice j, se for, colocamos o que está no index i na original list como valor do sorted list, se não,
sera com o index j. Em ambos os casos os valores dos apontadores, j, i, k, são incrementados.

Caso ainda houver algo na primeira metade a ser copiado, ou seja, enquanto i AINDA for menor que mid,
definimos o valor de sortedList no indice k para ser igual ao valor no indice i na originalList. Incrementa-se
sempre os dois valores no final
O mesmo acontece para a segunda metdade, mas em vez de i, usamos J, e o loop continua enquanto j for menor que SIZE

No final, como isso será feito dentro de uma thread temos que dar pthread_exit(NULL) para sair da thread.

Voltando a função main, após a executação do mergeSublists usamos pthread_join passando o valor do id da thread
de merge para esperar pela thread anterior ser finalizada.
No final damos o print de todos os valores mostrando que a array foi ordenada 


